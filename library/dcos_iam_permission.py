# !/usr/bin/python

from ansible.module_utils.basic import *

DOCUMENTATION = '''
module: dcos_iam_permission
short_description: Create and assign permission strings in DC/OS IAM and assign to group
description:
  - create permissions in DC/OS IAM
  - assign permissions with assoiated actions to groups in DC/OS IAM
version_added: "1.0"
options:
  dcos_url:
    description:
      - DC/OS IAM API base url
    required: true
  user:
    description:
      - DC/OS user with superuser rights
    required: true
  password:
    description:
      - DC/OS user password
    required: true
  perm_string:
    description:
      - DC/OS permission string consisting of the permission string and the action
    required: false
  group:
    description:
      - name of the group to associate permissions to.
    required: false 
  state:
    description:
      - Whether to list the details or create new permissions.
    required: false
    default: view
    choices: [view, present]
requirements: ['requests', 'json', 're']
notes:
 - Version 1.0
 - Before using, make sure you are aware of the format of permissions in DC/OS
 - The format in the text input file is permission|action
author: Timo Bartels <timo@bartels-online.net>
'''

EXAMPLES = '''
# View details of existing permissions listed in a text file
- dcos_iam_permission:
    dcos_url: https://master-url
    user: dcos_admin
    password: dcos_admin_password
    perm_string: '{{ item }}'
    state: view
  with_lines:
    - cat permissions.txt

# Create permissions and associate them with an existing group
# NOTE: this module expects the group to be present! Use the module 'dcos_iam_group' to create groups in DC/OS.
- dcos_iam_permission:
    dcos_url: https://master-url
    user: dcos_admin
    password: dcos_admin_password
    group: mydemogroup
    perm_string: '{{ item }}'
    state: present
  with_lines:
    - cat permissions.txt

'''

import requests
import json


def __err(msg, error):
  return "%s: %s (HTTP %s)"%(msg, error.response.json()["message"], str(error.response.status_code)) 

def __get_auth_token(dcos_url, user, password):
  url = "%s/acs/api/v1/auth/login"%dcos_url
  header = {'Content-Type': 'application/json'}
  auth_payload = {'uid': '%s'%user, 'password': '%s'%password}
  response = requests.post(url, data=json.dumps(auth_payload), headers=header) 
  response.raise_for_status()
  return response.json()['token']

def __get_group_details(dcos_url, group, token):
  url = "%s/acs/api/v1/groups/%s"%(dcos_url, group)
  header = {"Authorization": "token=%s" % token, 'Content-Type': 'application/json'}
  response = requests.get(url, verify=False, headers=header)
  if response.status_code == 400:
    return {'success': False, 'changed': False, 'message': 'DCOS error: %s' %response.json()['description'], 'exists': False }
  if response.status_code == 200:
    return { 'success': True, 'changed': False, 'message': '%s' %response.json(), 'exists': True }

def __create_permission(dcos_url, perm_string, token):
  perm_string = perm_string.strip()
  perm_string = re.sub(r'/', "%252F", perm_string)
  perm_string = perm_string.split("|")
  permission = perm_string[0]
  url = "%s/acs/api/v1/acls/%s"%(dcos_url, permission)
  header = {"Authorization": "token=%s" % token, 'Content-Type': 'application/json'}
  description={'description': 'auto generated by script'}
  response = requests.put(url, verify=False, json=description, headers=header)
  if response.status_code == 409:
    return {'success': True, 'changed': False, 'message': '%s' %response.json()['description'] }
  if response.status_code == 201:
    return { 'success': True, 'changed': True, 'message': 'Permission %s successfully created.' %permission, }

def __get_perm_string_details(dcos_url, perm_string, token):
  perm_string = perm_string.strip()
  perm_string = re.sub(r'/', "%252F", perm_string)
  perm_string = perm_string.split("|")
  permission = perm_string[0]
  url = "%s/acs/api/v1/acls/%s"%(dcos_url, permission)
  header = {"Authorization": "token=%s" % token, 'Content-Type': 'application/json'}
  response = requests.get(url, verify=False, headers=header)
  if response.status_code == 400:
    return {'success': True, 'changed': False, 'message': '%s' %response.json()['description'] }
  if response.status_code == 200:
    return { 'success': True, 'changed': False, 'message': '%s' %response.json() }

def __create_group_permission_action_connection(dcos_url, perm_string, group, token):
  perm_string = perm_string.strip()
  perm_string = re.sub(r'/', "%252F", perm_string)
  perm_string = perm_string.split("|")
  permission = perm_string[0]
  action = perm_string[1]
  url = "%s/acs/api/v1/acls/%s/groups/%s/%s"%(dcos_url, permission, group, action)
  header = {"Authorization": "token=%s" % token, 'Content-Type': 'application/json'}
  response = requests.put(url, verify=False, headers=header)
  if response.status_code == 409:
    return {'success': True, 'changed': False, 'message': '%s' %response.json()['description'] }
  if response.status_code == 204:
    return { 'success': True, 'changed': True, 'message': 'Permission %s successfully linked to group %s.' %(permission, group) }
  if response.status_code == 400:
    return {'success': False, 'changed': False, 'message': 'Incorrect permission string or action provided' }



def __play(params):
  if params['group'] is None or not params['group'].islower():
    return {'success': False, 'changed': False, 'message': 'Group name is invalid! Make sure to only use lowercase letters and no underscores.'}
 
  if params['perm_string'] is None or not params['perm_string'].islower():
    return {'success': False, 'changed': False, 'message': 'Permission string is invalid! Make sure to only use lowercase letters.'}

  token = None
  try:
    token = __get_auth_token(params['dcos_url'], params['user'], params['password'])
  except requests.exceptions.RequestException as err:
    return { 'success': False, 'changed': False, 'message': 'Could not authenticate against DCOS IAM API' } 

  grp_exists = __get_group_details(params['dcos_url'], params['group'], token)
  if not grp_exists['exists']:
    return {'success': False, 'changed': False, 'message': 'Group %s does not exist' %params['group'] }
  
  if params['state'] == 'view':
    return __get_perm_string_details(params['dcos_url'], params['perm_string'], token)
  elif params['state'] == 'present':
    grp_exists = __get_group_details(params['dcos_url'], params['group'], token)
    if grp_exists['exists']:
      __create_permission(params['dcos_url'], params['perm_string'], token)
      return __create_group_permission_action_connection(params['dcos_url'], params['perm_string'], params['group'], token)
    else:
      return {'success': False, 'changed': False, 'message': 'Group %s does not exist' %params['group'] }




def main():
    module = AnsibleModule(argument_spec=dict
                           (dcos_url=dict(required=True, type='str'),
                            user=dict(required=True, type='str'),
                            password=dict(required=True, type='str'),
                            group=dict(required=False, type='str'),
                            perm_string=dict(required=False, type='str'),
                            state=dict(required=False, type='str', choices=['view', 'present', 'absent'], default='view')),
                           supports_check_mode=False)

    result = __play(module.params)

    if not result['success']:
        module.fail_json(msg=result['message'])
    else:
        module.exit_json(changed=result['changed'], msg=result['message'])


if __name__ == '__main__':
    main()

